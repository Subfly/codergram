	.text
	.globl __start

__start:
	#Loading registers for text cases
	addi $s0, $0, 3
	addi $s1, $0, 5
	addi $s2, $s0, 7
	
	#Starting test case for push
	push $s0
	lw $t0, 4($sp) #Get the value (if?) stored
	beq $t0, 3, cont #Control is true, then continue
	j fail #Jump to fail
	cont:
		ble $s0, $s1, cont2 #Control is true, then continue
		j fail #Control is false, then fail
		cont2:
			#Random test codes
			sw $t0, 4($s0)
			sub $v0, $t5, $t7
			beq $v0, $v0, 0x00000042 
			addi $s0, $0, 5
			add $a1, $a1, $a0 
			or $s0, $a3, $v0 
			sw $a3, 20($v1) 
			lw $a1, 4($v0)
			beq $t1, $t3, 10 
			sub $t3, $s3, $v0
			addi $t4, $t4, -3
			j 0x00000040 
			lw $a0, 80($0) 
			slt $v0, $v1, $a0 
			j 0x00000044 
			sub $s0, $s0, $s0
			slt $s0, $s1, $s2
			lw $t1, 12($sp)
			sw $s0, 4($s0)
			addi $v0, $0, 5
			addi $v0, $0, 12
			addi $a3, $v1, -9 
			or $a0, $a3, $v0 
			and $a1, $v1, $a0 
			add $a1, $a1, $a0 
			beq $a1, $a3, 10 
			slt $a0, $v1, $a0 
			beq $a0, $0, 1
			addi $a1, $0, 0 
			slt $a0, $a3, $v0 
			add $a3, $a0, $a1 
			sub $a3, $a3, $v0 
			sw $a3, 68($v1) 
			lw $v0, 80($0) 
			j 0x00000044 
			addi $v0, $0, 1 
			sw $v0, 84($0) 
			j 0x00000048 
			lw $s0, 4($s1)
			push $a2
			ble $a1, $a2, 0x00000044
			slt $t1, $s1, $v0
			addi $v0, $v0, 5
			lw $s0, 4($sp)
			sw $s1, 32($sp)

	fail:
		addi $a0, $a0, 0 #Return 0 if fail

	.data